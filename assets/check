#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

. $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0


uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
pool_name=$(jq -r '.source.pool // ""' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)

# uri=git@github.com:cfmobile/environment-pool.git
# branch=master
# pool_name=trigger-test
# ref=HEAD~100

if [ -z "$uri" ]; then
  config_errors="${config_errors}invalid payload (missing uri)\n"
fi

if [ -z "$branch" ]; then
  config_errors="${config_errors}invalid payload (missing branch)\n"
fi

if [ -z "$pool_name" ]; then
  config_errors="${config_errors}invalid payload (missing pool)\n"
fi

if [ -n "$config_errors" ]; then
  echo -e $config_errors
  exit 1
fi

###########
#
# end processing inputs
#
###########

###########
#
# start git setup
#
###########

load_pubkey $payload

destination=$TMPDIR/git-resource-repo-cache

if [ -d $destination ]; then
  cd $destination
  git fetch
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone $uri $branchflag $destination
  cd $destination
fi

git config user.name pcf-toronto-ci-bot
git config user.email tpt-team+cibot@pivotal.io

###########
#
# end git setup
#
###########


###########
#
# start calculating pending triggers
#
###########


# if ref does not exist (first time resource was checked) create triggers file with value 0

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  new_pending_triggers=$(git show --pretty="format:" --name-status -r $ref..HEAD -- $pool_name/unclaimed/ | grep "^A" |wc -l)
  old_pending_triggers=$(cat $pool_name/.pending-triggers)
  total_pending_triggers=$((old_pending_triggers + new_pending_triggers))
else
  total_pending_triggers=$(ls $pool_name/unclaimed | wc -l)
fi

###########
#
# end calculating pending triggers
#
###########


###########
#
# start handling results
#
###########

if [ $total_pending_triggers -gt 0 ]; then 
  last_commit=$(git log -1 --pretty='format:%H')
  result=$(echo $last_commit | jq -R '.' | jq -s "map({ref: .})")
else 
  result="[]"
fi

###########
#
# end handling results
#
###########



###########
#
# start updating triggers
#
###########

if [ $total_pending_triggers -gt 0 ]; then 
  echo $((total_pending_triggers - 1)) > $pool_name/.pending-triggers
  git add $pool_name/.pending-triggers
  git commit --allow-empty -m "updates tally of pending triggers in $pool_name to $((total_pending_triggers - 1))"
  git push
fi

###########
#
# end updating triggers
#
###########

echo $result >&3

